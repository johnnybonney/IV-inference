library(data.table)
?data.table
test_auction_data <- data.table(auctionYear = 2008, auctionID = 10101,
firmID = sample(10000000:99999999, 20, replace=T),  bid = rnorm(20, 7000000, 500000))
test_auction_data
?sort
long_data <- test_auction_data
long_data[, max_bid := max(bid), by = auctionID]
long_data
long_data[, runnerup_bid := function(bid) sort(bid, decreasing=T)[2], by = auctionID]
setorder(long_data, ID, bid)
setorder(long_data, auctionID, bid)
difference(3, 4)
diff(4, 5)
?diff
diff(c(1, 2))
setorder(long_data, auctionID, bid)
long_data
long_data[, max_bid := NULL]
long_data
long_data[, closeAuction := as.integer(diff(bid[1:min(.N, 2L)]) / min(bid), by=auctionID]
long_data[, winner_bid := min(bid), by = auctionID]
long_data[, runnerup_bid := function(bid) sort(bid, decreasing=T)[2], by = auctionID]
}
close_defn <- test_close_defn
close_defn <- 0.05
long_data[, closeAuction := as.integer(diff(bid[1:min(.N, 2L)]) / min(bid) > close_defn), by=auctionID]
long_data
(6249819 - 5482090) / 6249819
long_data[, closeAuction := as.integer(diff(bid[1:min(.N, 2L)]) / min(bid) < close_defn), by=auctionID]
long_data
?require
1L
2L
?setorder
test_auction_data <- data.table(auctionYear = 2008, auctionID = rep(10101:10104, each=5),
firmID = sample(10000000:99999999, 20, replace=T),  bid = rnorm(20, 7000000, 500000))
test_close_defn <- 0.05
assign_closeAuction <- function(long_data, close_defn){
require(data.table)
if (!is.data.table(long_data)) {
stop(sprintf("Input `long_data' must be data.table but is %s. \n", class(wage_data)))
}
if (!is.numeric(close_defn)){
stop(sprintf("Input `close_defn' must be numeric but is %s. \n", class(close_defn)))
}
setorder(long_data, auctionID, bid)
# TODO: if there is only one participant, this doesn't work.
long_data[, closeAuction := as.integer(diff(bid[1:min(.N, 2L)]) / min(bid) < close_defn), by=auctionID]
}
assign_closeAuction <- function(long_data, close_defn){
require(data.table)
if (!is.data.table(long_data)) {
stop(sprintf("Input `long_data' must be data.table but is %s. \n", class(wage_data)))
}
if (!is.numeric(close_defn)){
stop(sprintf("Input `close_defn' must be numeric but is %s. \n", class(close_defn)))
}
setorder(long_data, auctionID, bid)
# TODO: if there is only one participant, this doesn't work.
long_data[, closeAuction := as.integer(diff(bid[1:min(.N, 2L)]) / min(bid) < close_defn), by=auctionID]
return(long_data)
}
test_auction_data
assign_closeAuction(test_auction_data, test_close_defn)
test_auction_data
(7013977 - 6488269) / 6488269
(6301954 - 6558411) / -6301954
(6835979 - 6438486) / 6438486
(6753773 - 6715867) / 6715867
test_auction_data_2 <- test_auction_data[auctionID != 10104 | bid == 7782429]
test_auction_data_2
test_auction_data_2 <- test_auction_data[auctionID == 10101 | bid == 7731963]
test_auction_data_2
test_auction_data
# TODO: if there is only one participant, this doesn't work.
long_data[ , num_auction_participants := .N, by = auctionID ]
long_data
test_auction_data <- data.table(auctionYear = 2008, auctionID = rep(10101:10104, each=5),
firmID = sample(10000000:99999999, 20, replace=T),  bid = rnorm(20, 7000000, 500000))
long_data <- test_auction_data
# TODO: if there is only one participant, this doesn't work.
long_data[ , num_auction_participants := .N, by = auctionID ]
long_data
assign_closeAuction <- function(long_data, close_defn){
require(data.table)
if (!is.data.table(long_data)) {
stop(sprintf("Input `long_data' must be data.table but is %s. \n", class(wage_data)))
}
if (!is.numeric(close_defn)){
stop(sprintf("Input `close_defn' must be numeric but is %s. \n", class(close_defn)))
}
setorder(long_data, auctionID, bid)
long_data[, num_auction_participants := .N, by = auctionID ]
long_data[num_auction_participants > 1,
closeAuction := as.integer(diff(bid[1:min(.N, 2L)]) / min(bid) < close_defn),
by = auctionID]
long_data[num_auction_participants == 1,
closeAuction := 0]
return(long_data)
}
library(data.table)
test_auction_data <- data.table(auctionYear = 2008, auctionID = rep(10101:10104, each=5),
firmID = sample(10000000:99999999, 20, replace=T),  bid = rnorm(20, 7000000, 500000))
test_close_defn <- 0.05
assign_closeAuction <- function(long_data, close_defn){
require(data.table)
if (!is.data.table(long_data)) {
stop(sprintf("Input `long_data' must be data.table but is %s. \n", class(wage_data)))
}
if (!is.numeric(close_defn)){
stop(sprintf("Input `close_defn' must be numeric but is %s. \n", class(close_defn)))
}
setorder(long_data, auctionID, bid)
long_data[, num_auction_participants := .N, by = auctionID ]
long_data[num_auction_participants > 1,
closeAuction := as.integer(diff(bid[1:min(.N, 2L)]) / min(bid) < close_defn),
by = auctionID]
long_data[num_auction_participants == 1,
closeAuction := 0]
long_data[, num_auction_participants := NULL]
return(long_data)
}
assign_closeAuction(test_auction_data, test_close_defn)
test_auction_data <- assign_closeAuction(test_auction_data, test_close_defn)
test_auction_data
test_auction_data[]
?data.frame
df_4 <- data.frame(1:20, sample(-1:5, 20))
df_4 <- data.frame(1:20, sample(-1:5, 20, replace=T))
df_4$constant1 <- add(20, df_4)
df_4 <- data.frame(sample(-1:5, 20, replace=T))
df_4$constant1 <- add(20, df_4)
df_4 <- data.frame(x = sample(-1:5, 20, replace=T))
df_4$constant1 <- df_4$x
df_4$constant1 <- df_4$x + 20
df_4$constant1
log.tras <- log(df_4$constant1)
frequency_log <- (log.tras)
hist(log.tras)
plot(frency_log)
hist(log(df_4$x))
?mutate
library(tidyverse)
install.packages("dplyr")
?mutate
#install.packages("tidyverse")
install.packages(c("nycflights13", "gapminder", "Lahman"))
tidyverse_update()
library(tidyverse)
tidyverse_update()
install.packages(c("cli", "reprex", "rstudioapi"))
install.packages(c("cli", "reprex", "rstudioapi"))
tidyverse_update()
library(tidyverse)
tidyverse_update()
dput(mtcars)
df <- structure(list(mpg = c(21, 21, 22.8, 21.4, 18.7, 18.1, 14.3,
24.4, 22.8, 19.2, 17.8, 16.4, 17.3, 15.2, 10.4, 10.4, 14.7, 32.4,
30.4, 33.9, 21.5, 15.5, 15.2, 13.3, 19.2, 27.3, 26, 30.4, 15.8,
19.7, 15, 21.4), cyl = c(6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8,
8, 8, 8, 8, 8, 4, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 8, 6, 8, 4),
disp = c(160, 160, 108, 258, 360, 225, 360, 146.7, 140.8,
167.6, 167.6, 275.8, 275.8, 275.8, 472, 460, 440, 78.7, 75.7,
71.1, 120.1, 318, 304, 350, 400, 79, 120.3, 95.1, 351, 145,
301, 121), hp = c(110, 110, 93, 110, 175, 105, 245, 62, 95,
123, 123, 180, 180, 180, 205, 215, 230, 66, 52, 65, 97, 150,
150, 245, 175, 66, 91, 113, 264, 175, 335, 109), drat = c(3.9,
3.9, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92,
3.07, 3.07, 3.07, 2.93, 3, 3.23, 4.08, 4.93, 4.22, 3.7, 2.76,
3.15, 3.73, 3.08, 4.08, 4.43, 3.77, 4.22, 3.62, 3.54, 4.11
), wt = c(2.62, 2.875, 2.32, 3.215, 3.44, 3.46, 3.57, 3.19,
3.15, 3.44, 3.44, 4.07, 3.73, 3.78, 5.25, 5.424, 5.345, 2.2,
1.615, 1.835, 2.465, 3.52, 3.435, 3.84, 3.845, 1.935, 2.14,
1.513, 3.17, 2.77, 3.57, 2.78), qsec = c(16.46, 17.02, 18.61,
19.44, 17.02, 20.22, 15.84, 20, 22.9, 18.3, 18.9, 17.4, 17.6,
18, 17.98, 17.82, 17.42, 19.47, 18.52, 19.9, 20.01, 16.87,
17.3, 15.41, 17.05, 18.9, 16.7, 16.9, 14.5, 15.5, 14.6, 18.6
), vs = c(0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0,
0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1), am = c(1,
1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,
0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1), gear = c(4, 4, 4, 3,
3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3, 3,
3, 3, 4, 5, 5, 5, 5, 5, 4), carb = c(4, 4, 1, 1, 2, 1, 4,
2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2, 2, 4, 2, 1,
2, 2, 4, 6, 8, 2)), row.names = c("Mazda RX4", "Mazda RX4 Wag",
"Datsun 710", "Hornet 4 Drive", "Hornet Sportabout", "Valiant",
"Duster 360", "Merc 240D", "Merc 230", "Merc 280", "Merc 280C",
"Merc 450SE", "Merc 450SL", "Merc 450SLC", "Cadillac Fleetwood",
"Lincoln Continental", "Chrysler Imperial", "Fiat 128", "Honda Civic",
"Toyota Corolla", "Toyota Corona", "Dodge Challenger", "AMC Javelin",
"Camaro Z28", "Pontiac Firebird", "Fiat X1-9", "Porsche 914-2",
"Lotus Europa", "Ford Pantera L", "Ferrari Dino", "Maserati Bora",
"Volvo 142E"), class = "data.frame")
head(df)
head(cars)
head(mtcars)
all(mtcars == df)
ggplot2:mpg
ggplot2::mpg
?mpg
#create visualization to put displ on the x-axis and hwy on the y-axis
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)
nrow(mpg)
ncol(mpg)
# What does the drv variable describe? Read the help for ?mpg to find out.
?mpg
# Make a scatterplot of hwy vs cyl.
scatter(mpg.hwy, mpg.cyl)
?scatter
# Make a scatterplot of hwy vs cyl.
plot(mpg.hwy, mpg.cyl)
# Make a scatterplot of hwy vs cyl.
plot(mpg$hwy, mpg$cyl)
# What happens if you make a scatterplot of class vs drv? Why is the plot not useful?
with(mpg, plot(hwy, cyl))
# What happens if you make a scatterplot of class vs drv? Why is the plot not useful?
with(mpg, plot(class, drv))
3.3
# you can map the colors of your points to the class variable to reveal the class of each car.
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
# you can map the colors of your points to the class variable to reveal the class of each car.
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = size))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, alpha = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
# Which variables in mpg are categorical? Which variables are continuous?
# (Hint: type ?mpg to read the documentation for the dataset). How can you see this information when you run mpg?
?mpg
class(mpg)
str(mpg)
?str
# Map a continuous variable to color, size, and shape. How do these aesthetics behave differently for categorical
# vs. continuous variables?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = year))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = year))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = year))
# What happens if you map the same variable to multiple aesthetics?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = displ, color = displ))
# What does the stroke aesthetic do? What shapes does it work with? (Hint: use ?geom_point)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, stroke = year))
# What does the stroke aesthetic do? What shapes does it work with? (Hint: use ?geom_point)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, stroke = class))
?geom_point
# What does the stroke aesthetic do? What shapes does it work with? (Hint: use ?geom_point)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = class, stroke = 4))
# What does the stroke aesthetic do? What shapes does it work with? (Hint: use ?geom_point)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = class, stroke = 1))
# What does the stroke aesthetic do? What shapes does it work with? (Hint: use ?geom_point)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = class, stroke = 2))
# What happens if you map an aesthetic to something other than a variable name, like aes(colour = displ < 5)?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = displ, color = displ < 5))
# What happens if you map an aesthetic to something other than a variable name, like aes(colour = displ < 5)?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = displ < 5))
setwd("C:/Users/John Bonney/Desktop/Magne_projects/iv_inference")
rm(list = ls())
set.seed(10L)
devtools::load_all(pkg = "IVMTE", reset = TRUE)
?dtsf
#assign probability of treatment uptake, p
iv_assignment <- data.table(z = 1:4, p = c(0.12, 0.29, 0.48, 0.78))
library(data.table)
#assign probability of treatment uptake, p
iv_assignment <- data.table(z = 1:4, p = c(0.12, 0.29, 0.48, 0.78))
iv_assignment
test_data <- data.table(x = rnorm(4200, mean = 0.5, sd = 0.1), #not sure what we really want here
z = sample(1:4, 4200, replace=T),
u = runif(4200, 0, 1)) #u *conditioned on X = x and Z = z* should be distributed uniformly...
test_data[, ey0 := 0.9 - 1.1 * u + 0.3 * u^2] #MTR from Mogstad and Torgovitsky (ARE) p. 582 -- is this how we want to do it? (Josh uses splines, but I can't find "uSpline" function)
test_data[, ey1 := 0.35 - 0.3 * u - 0.05 * u^2]
head(test_data)
test_data <- iv_assignment[test_data]
setkey(iv_assignment, z)
setkey(test_data, z)
test_data <- iv_assignment[test_data]
head(test_data)
tail(test_data)
test_data[, d := as.integer(u <= p)] #equation 4
test_data[, ey := d * ey1 + (1 - d) * ey0] #equation 1
head(test_data)
?ivmte
